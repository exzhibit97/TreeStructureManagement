@model IEnumerable<TreeStructure.Models.Category>
@inject TreeStructure.Infrastructure.CategoriesContext _context
@{
    ViewData["Title"] = "View";
}


<h1>View</h1>
<div class="modal fade" id="editModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalLabel">Warning</h4>
            </div>
            <div id="modalBody" class="modal-body edit-modal-body">
            </div>
            @*<div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal" id="cancel-edit">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirm-edit">Edit</button>
                </div>*@
        </div>
    </div>
</div>

<button id="collapse" class="btn-primary">Collapse all</button>
<br />
<li id="li-0" class="wholeNode">
    <i class="expandable fas fa-chevron-down"></i>
    <a>Root</a><span class="menu"><i class="fas fa-plus"></i></span>
    <span class="options hidden">
        <a class="btn btn-primary render" id="ul-0"><i class="fas fa-plus"></i>Add node</a>
        <a class="btn btn-info" onclick="sortListDir(0)"><i class="fas fa-sort"></i>Sort</a>

    </span>
    <ul id="collapsibleList">
        @await Component.InvokeAsync("CategoriesStructure", new { isFirstCall = true })
    </ul>
</li>

@section scripts {
    <script>
        $(document).ready(function () {
            $('.btn-block').click(function () {
                var url = $('#myModal').data('url');
                $.get(url, function (data) {
                    $('#myModal').html(data);
                    $('#myModal').modal('show');
                });
            });
        });
    </script>

    <script>
        var listItem = $(".menu");
        var x = false;
        listItem.click(function (e) {
            $(this).parent('li').children('.options').toggleClass("visible");
            listItem.not(this).parent('li').children('.options').removeClass("visible");
            x = !x;
            $(this).parent().children('span').children('i').toggleClass('fa-plus');
            $(this).parent().children('span').children('i').toggleClass('fa-minus');

            var listItemCurrent = $(this).parent('li').children('.menu');
            var currentMenu = $(this).parent('li').children('.options');
        });
    </script>

    <script type="text/javascript">
        $(document).ready(function () {
            //$('li').children('i').text("-");
            //$('li').children('.expandable').toggleClass('fa-chevron-down');
            $('li .expandable').on('click', function (e) {
                if ($(e.target).parent('li').children('ul').is(':visible')) {
                    $(e.target).parent('li').children('ul').slideToggle();
                    //$(e.target).parent('li').children('i').text("+");
                    $(e.target).parent('li').children('i').toggleClass('fa-chevron-down');
                    $(e.target).parent('li').children('i').toggleClass('fa-chevron-right');


                }
                else {
                    $(e.target).parent('li').children('ul').slideToggle();
                    //$(e.target).parent('li').children('i').text("-");
                    $(e.target).parent('li').children('i').toggleClass('fa-chevron-down');
                    $(e.target).parent('li').children('i').toggleClass('fa-chevron-right');
                }
                e.stopPropagation();
            });
        });
    </script>
    <script>
        document.getElementById("collapse").addEventListener("click", function (e) {

            $('#collapsibleList ul').slideToggle();
            $('#collapsibleList').toggleClass('closed');

            if ($('#collapsibleList').hasClass('closed')) {
                //$('#collapsibleList .expandable').text('+');

                $('#collapsibleList .expandable').toggleClass('fa-chevron-down ');
                $('#collapsibleList .expandable').toggleClass('fa-chevron-right');

                $('#collapsibleList ul').children('ul').slideToggle();
            } else {
                //$('#collapsibleList .expandable').text('-');
                $('#collapsibleList .expandable').toggleClass('fa-chevron-down');
                $('#collapsibleList .expandable').toggleClass('fa-chevron-right');


            }
        });
    </script>
    <script>
        $(document).ready(function () {
            $('.render').on('click', function (e) {
                var unorderedList = $(e.target).parent('.options').siblings('ul');
                unorderedList.prepend('<form><input id="name" type="text" name="categoryName"><input type="submit" id="btn-submit" value="Submit"></form>');
                unorderedList.children('.errorText').detach();
                $('#btn-submit').on('click', function (e) {
                    e.preventDefault();
                    var strId = $('#btn-submit').parent('form').parent('ul').siblings('span').children('.render').attr('id');
                    var id = parseInt(strId);
                    var obj = Add(id, e);
                    $('form').detach();

                })
            });
        });

        function Delete(ID) {
            $.ajax({
                url: "/Categories/Delete/" + ID,
                type: "POST",
                contentType: "application/json;charset=UTF-8",
                dataType: "json",
                success: function (data) {
                    console.log(data.id);
                    $('#li-' + data.id).detach();
                },
                error: function (errormessage) {
                    console.log(errormessage.responseText);
                }
            });
        }

        $("#rootElement").on('click', function () {
            var rootElement = $("#rootElement");
            var rootChildrenList = rootElement.siblings('ul');
            rootChildrenList.prepend('<form><input id="name" type="text" name="categoryName"><input type="submit" id="btn-submit" value="Submit"></form>');
            $('#btn-submit').on('click', function (e) {
                e.preventDefault();
                var strId = $('#btn-submit').parent('form').parent('ul').siblings('span').children('.render').attr('id');
                var id = null
                var obj = Add(id, e);
                $('form').detach();
            });
        });

        function Add(id, event) {
            var ev = event;
            var categoryObj = {
                Name: $('#name').val(),
                ParentID: id,
            };
            $.ajax({
                url: "/Categories/Create",
                data: JSON.stringify(categoryObj),
                type: "POST",
                contentType: "application/json:charset=UTF-8",
                dataType: "json",
                success: function (data) {
                    //var unorderedList = $(target).parent('.options').siblings('ul');
                    if (data.parentID == null) {
                        $('#ul-' + '0').append('<li id=' + data.id + ' class=wholeNode' + '<a>' + data.name + '</a><span class="menu"><i class="fas fa-plus"></i></span>' +
                            '<span class="options hidden"><a class="btn btn-danger delete" data-id="' + data.id + '"data-controller="Categories" data-action="Delete" data-body-message="Are you sure to delete this node?"> <i class="fas fa-trash alt"></i>Delete</a>' +
                            '<a class="btn btn-secondary edit" data-id="' + data.id + '" data-controller="Categories" data-action="Edit" onclick="loadEdit(' + data.id + ')" data-body-message="Are you sure to edit this node?"><i class="fas fa-edit"></i>Edit</a>' +
                            '<a class="btn btn-primary render" id="' + data.id + '"><i class="fas fa-plus"></i>Add node</a>' +
                            '<a class="btn btn-info" onclick="sortListDir(' + data.id + ')"><i class="fas fa-sort"></i>Sort</a></span>');
                    } else {
                        var parentListId = data.parentID;
                        //$('#ul-' + parseInt(parentListId)).append('<li class=wholeNode><a>' + data.name + '</a><span class="menu"> =&gt;</span><span class="options hidden">' +
                        //    '<a href="/Categories/Create/' + data.id + '">Add Node</a> |' +
                        //    '<a href="/Categories/Edit/' + data.id + '">Edit</a> |' +
                        //    '<a href="/Categories/Delete/' + data.id + '">Delete</a>' +
                        //    '<button type="button" class="btn btn-primary" id="btnAdd" onclick="Delete(' + data.id + ')">Delete</button>' +
                        //    '<button type="button" class="render" id="' + data.id + '">Add node</button></span></li>');
                        $('#ul-' + parseInt(parentListId)).append('<li id=' + data.id + ' class=wholeNode' + '<a>' + data.name + '</a><span class="menu"><i class="fas fa-plus"></i></span>' +
                            '<span class="options hidden"><a class="btn btn-danger delete" data-id="' + data.id + '"data-controller="Categories" data-action="Delete" data-body-message="Are you sure to delete this node?"> <i class="fas fa-trash alt"></i>Delete</a>' +
                            '<a class="btn btn-secondary edit" data-id="' + data.id + '" data-controller="Categories" data-action="Edit" onclick="loadEdit(' + data.id + ')" data-body-message="Are you sure to edit this node?"><i class="fas fa-edit"></i>Edit</a>' +
                            '<a class="btn btn-primary render" id="' + data.id + '"><i class="fas fa-plus"></i>Add node</a>' +
                            '<a class="btn btn-info" onclick="sortListDir(' + data.id + ')"><i class="fas fa-sort"></i>Sort</a></span>');

                    }
                    console.log(data);

                    //loadData();
                },
                error: function (data) {
                    if (categoryObj.Name.length > 60) {
                        $('#ul-' + parseInt(categoryObj.ParentID)).prepend('<span class="errorText">' + 'Name was too long!' + '</span>');
                    }
                    console.log("error" + JSON.stringify(data));
                    //console.log(errormessage.responseText);
                }
            });
            return this.data;
        }

        function Append(obj) {
            var unorderedList = $(e.target).parent('.options').siblings('ul');
            console.log(this);
            unorderedList.append('<li class=wholeNode><a>${obj.Name}</a></li>');
        }
    </script>

    <script>
        var loadEdit = function (categoryID) {
            $.ajax({
                type: 'POST',
                url: "Categories/EditPartial",
                data: { "Id": categoryID },
                success: function (response) {
                    $('#modalBody').html(response);

                    $('#editModal').modal('show');
                }
            })
        }
    </script>
    <script>
        //Courtesy of W3C
        function sortListDir(listId) {
            var list, i, switching, b, shouldSwitch, dir, switchcount = 0;
            list = $('#li-' + listId);
            switching = true;
            // Set the sorting direction to ascending:
            dir = "asc";
            // Make a loop that will continue until no switching has been done:
            while (switching) {
                // start by saying: no switching is done:
                switching = false;
                b = list.children('ul').children('li');
                d = list.children('ul').children('li').children('a');
                console.log(d);
                // Loop through all list-items:
                for (i = 0; i < (b.length - 1); i++) {
                    //start by saying there should be no switching:
                    shouldSwitch = false;
                    /* check if the next item should switch place with the current item,
                    based on the sorting direction (asc or desc): */
                    if (dir == "asc") {
                        /*if (b[i].innerHTML.toLowerCase() > b[i + 1].innerHTML.toLowerCase()) {*/
                        if (d[i].innerHTML.toLowerCase() > d[i + 1].innerHTML.toLowerCase()) {
                            /* if next item is alphabetically lower than current item,
                            mark as a switch and break the loop: */
                            shouldSwitch = true;
                            break;
                        }
                    } else if (dir == "desc") {
                        if (d[i].innerHTML.toLowerCase() < d[i + 1].innerHTML.toLowerCase()) {
                            /* if next item is alphabetically higher than current item,
                            mark as a switch and break the loop: */
                            shouldSwitch = true;
                            break;
                        }
                    }
                }
                if (shouldSwitch) {
                    /* If a switch has been marked, make the switch
                    and mark that a switch has been done: */
                    b[i].parentNode.insertBefore(b[i + 1], b[i]);
                    switching = true;
                    // Each time a switch is done, increase switchcount by 1:
                    switchcount++;
                } else {
                    /* If no switching has been done AND the direction is "asc",
                    set the direction to "desc" and run the while loop again. */
                    if (switchcount == 0 && dir == "asc") {
                        dir = "desc";
                        switching = true;
                    }
                }
            }
        }
    </script>
}